
% biotsav_3d_attempts_circular_loop
% Matlab code for computing the magnetic field of a circular 
% current loop in 3D
clear all; help biotsav;  % Clear memory; print header

%@ Initialize variables (e.g., Loop radius, current, graphics)
mu0 = 4*pi*1e-7;       % Permeability of free space (T*m/A)
I_current = 5.0;       % Current in the loop (A)
Radius = input('Enter radius of the loop (m): ');
Constant = mu0/(4*pi) * I_current;   % Useful constant            % Number of grid points for plots
xMax = 12;              % Limits for graphics
yMax = xMax; 
zMax = yMax;

NSegments = input('Enter an amount of segments: ');
x_0 = input('Enter an initial x-position: ');

fprintf('Field plotted from x = %g m to x = %g m\n',-xMax,xMax);
fprintf('Field plotted from y = %g m to y = %g m\n',-yMax,yMax);
fprintf('Field plotted from z = %g m to z = %g m\n',-yMax,yMax);

for i=1:NSegments
     xObs(i) = -xMax + (i-1)/(NSegments-1)*(2*xMax); % x values to plot
     yObs(i) = -yMax + (i-1)/(NSegments-1)*(2*yMax); % y values to plot
     zObs(i) = -zMax + (i-1)/(NSegments-1)*(2*zMax);
end
%@ Loop over the segments in the current loop in yz plane

for k=1:NSegments

  %@ Compute location of the endpoints of a segment
  theta1 = 2*pi*(k-1)/NSegments;
  x1 = 0;
  y1 = Radius*cos(theta1);
  z1 = Radius*sin(theta1);
  theta2 = 2*pi*k/NSegments;
  x2 = 0;
  y2 = Radius*cos(theta2);
  z2 = Radius*sin(theta2);
  
  %@ Compute components of segment vector dl
  dlx(k) = x2-x1;
  dly(k) = y2-y1;
  dlz(k) = z2-z1;
  
  %@ Compute the location of the midpoint of a segment
  xc(k) = (x2+x1)/2;
  yc(k) = (y2+y1)/2;
  zc(k) = (z2+z1)/2;
  
 end

%@ Loop over all grid points and evaluate B(x,y) on grid
for i=1:NSegments
  for j=1:NSegments
    for l=1:NSegments
        Bx = 0;  By = 0; Bz = 0; % Initialize B to zero

   %@ Loop over the segments in the loop
            for k=1:NSegments   
   
     %@ Compute components of the r vector (vector between 
	 %% segment on loop and observation point)
                rx = xObs(j) - xc(k);
                ry = yObs(i) - yc(k);
                rz = zObs(l)- zc(k);             % Observation points are in xyz volume
	 
	 %@ Compute r^3 from r vector
                r3 = sqrt(rx^2 + ry^2 + rz^2)^3;
	 
	 %@ Compute x, y and z components of cross product dl X r
                dlXr_x = dly(k)*rz - dlz(k)*ry;
                dlXr_y = dlz(k)*rx - dlx(k)*rz;
                dlXr_z = dlx(k)*ry - dly(k)*rx;
	 
	 %@ Increment sum of x, y and z components of magnetic field
                Bx = Bx + Constant*dlXr_x/r3;
                By = By + Constant*dlXr_y/r3;
                Bz = Bz + Constant*dlXr_z/r3;

     end   
   %@ Compute normalized vectors of magnetic field direction
      BMag = sqrt(Bx^2 + By^2 + Bz^2);
      BDirx(i,j,l) = Bx/BMag;
      BDiry(i,j,l) = By/BMag;
      BDirz(i,j,l) = Bz/BMag;
       
    end
 end
 fprintf('Calculation %g%% complete\n',100*i/NSegments);
end

%-------------------------------------------------------------
%Declaring the parametrisation for current loop in 3D
%This is just for cosmetic reasons

t=linspace(0,2*pi);

Z_circ = Radius.*sin(t); 

Y_circ = Radius.*cos(t);

X_circ=0*Y_circ;

dx = 1/(NSegments-1)*(2*xMax); %Increments of length to use in quiver plot 

%@ Plot magnetic field direction as a quiver (arrow) plot in 3D

[x,y,z]=meshgrid(-xMax:dx:xMax, -yMax:dx:yMax, -zMax:dx:zMax); 

%Meshgrid of the same size vectors as B field

clf;  figure(gcf); 
                    % Clear figure; bring figure window forward

H1 = quiver3( x, y, z, BDirx, BDiry,BDirz);

% Draw arrows for B field

hold on;


%Plotting of the current loop

plot3(X_circ, Y_circ ,Z_circ,'k');

plot(0,Radius,'ro');   % Mark the location of the current
plot(0,-Radius,'rx');  % loop on the plot
title('Magnetic field direction for loop in yz plane');
xlabel('x');  ylabel('y'); zlabel('x');
hold off;

